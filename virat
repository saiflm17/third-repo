                                                             PROJECT DOCUMENTATION

1. TITLE :
GitOps-Based CI/CD Pipeline using ArgoCD and Kubernetes .

2. INTRODUCTION :
Modern DevOps practices demand continuous, reliable, and scalable deployment mechanisms. GitOps simplifies this by using Git as the single source of truth for
Kubernetes cluster configuration and application deployment. This project demonstrates a practical implementation of GitOps using ArgoCD to automatically 
sync and deploy Kubernetes manifests files from a GitHub repository.

3.ABSTRACT :
This project aims to showcase how GitOps principles can be applied to automate the deployment and lifecycle management of applications on Kubernetes using ARGOCD.
So am creating CI/CD pipeline for automate purpose. Here in this project am creating KOPS Cluster because of cluster high availability so it is used to host 
applications whose manifests are stored in a 
version-controlled GitHub repository. ArgoCD is configured to continuously monitor the repository and apply changes in manifest files by changing the update 
versions and visualize the real-time synchronization via the ArgoCD dashboard.

4. TOOLS USED :
Git, Jenkins, Docker, GitHub, DockerHub, kubernetes(Kops Cluster), kubectl, ArgoCD.

5. STEPS INVOLVED IN BUILDING THE PROJECT :

#STEP-1 : First of all taking a New Server with Server configurations are server_name : project-10 AMI : Amazon linux kernel 5.10, Instance_type : t2.medium,
           Key_Pair : sai-kp, Security_Group : All-Traffic, EBS : 20GIB . After connecting to Server with SSH .

#STEP-2 : Now To Set-Up the Tools Git, Docker, Jenkins, kubernetes(Kops Cluster), kubectl, ArgoCD. 

#STEP-3 : Now am creating a New Repository in GitHub and the Repository_Name is project-10 .

#STEP-4 : After am accessing the Jenkins dash board with public-ip:8080 . 8080 it is a port number . Now am creating a New Job for the pipeline running purpose .

- So Here am using CI/CD pipeline for some advanced stages because of automate purpose .

#Step-5 : Now am installed some plugins 

PLUGIN_NAME : pipeline stage view , node.js, docker pipeline, eclipse temurin installer, sonarqube scanner, OWASP Dependency Check .

- Now writing and implementing CI/CD pipeline with the stages .

    stage-1 : It is a clean workspace .
    stage-2 : To get the source code from github to ci server .
    stage-3 : Here am using Sonarqube for the code quality analysis purpose because of to scan the source code .
    stage-4 : Next am using quality gates because the purpose of code must pass before it can move forward in the build, test, or deployment process. if the code 
              incorrect then the pipeline is aborted .
    stage-5 : To build the source code .
    stage-6 : OWASP Dependency-Check into a CI/CD pipeline helps checks known vulnerabilities in your project dependencies. 
    stage-7 : To build the dockerfile .then a New docker-image has to come and also To Rename that docker-image .
    stage-8 : So here am using Trivy Tool because to scan the New docker-image .
    stage-9 : Last stage is new docker-image to push the docker-hub .

- #STEP-6 : After my CI/CD pipeline is successfully executed . Then a New Docker Image is created .

NOTE : am taking the those screenshots of CI/CD pipeline and docker image are pasted in my GitHub Repository .

- There are some command are used in my project .
 
 - COMMAND : docker build -t image_name  - To build the dockerfile .

- COMMAND : docker push image_name - To push image to docker-hub . 

#STEP-7 : Now am deploying my application in ARGOCD. So Here am creating KOPS cluster because of my cluster high availability .

Now to set-up a Kubernetes Kops Cluster in server by using ,

  - awscli commands .   

  - kubectl commands .

  - kops cluster commands .

- To create a kops cluster creation by using command .

     - COMMAND : kops create cluster --name=saikumar.k8s.local --zones=us-east-1a,us-east-1b --master-size=t2.medium --master-count=1 --master-volume-size=30 
                 --node-size=t2.medium --node-count=3 --node-volume-size=30 .

     - COMMAND : kops get cluster - To check the list of clusters .

- After KOPS cluster set-up is completed . Now am creating two files for depoying my application .











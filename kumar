#STEP-1 : 

#STEP-2 : Now to set-up the tools git

#STEP-3 : After am accessing the Jenkins dash board with public-ip:8080 . 8080 it is a port number .

#STEP-4 : am creating a New job for the pipeline running purpose .

#Step-5 : Now am installed some plugins for my zomato application purpose .

PLUGIN_NAME : pipeline stage view , node.js, docker pipeline, eclipse temurin installer .

- After configured all the plugins to the my jenkins Job .

- For my Zomato Application am using here two ways of deployments and the first one am deploying in docker-compose and second one is 

  am deploying in kubernetes kops cluster .

- Now writing and implementing CI/CD pipeline with the stages .

    stage-1 : It is a clean workspace .
    stage-2 : To get the code from github to ci server .
    stage-3 : To build the Code 
    stage-4 : To build the dockerfile .then a New docker-image has to come .
    stage-5 : To Rename the docker-image and that docker-image push to Docker-Hub .
    stage-6 : To deploy the application in containers .

- so, this are the stages am implementing my CI/CD pipeline .

#STEP-6 : After my CI/CD pipeline is successfully executed . Then a New Docker Image and Docker Containers are also created .

NOTE : am taking the those screenshots of CI/CD pipeline and docker image and docker containers are pasted in my GitHub Repository .

- There are some Docker Commands are executed in my project and the commands are :

    - COMMAND : docker build -t image_name . - To build the dockerfile .

    - COMMAND : docker-compose up -d - To create a containers .

    - COMMAND : docker images - To check the list of images .

    - COMMAND : docker ps - To check the list of containers .

    - COMMAND : docker push image_name - To push the image to dockerhub .

#STEP-7 : Now am deploying my application in second way that is kubernetes kops cluster . So Here am creating KOPS cluster because of my cluster high availability .

Now to set-up a Kubernetes Kops Cluster in server by using ,

  - awscli commands .   

  - kubectl commands .

  - kops cluster commands .

- To create a kops cluster creation by using command .

     - COMMAND : kops create cluster --name=sai.k8s.local --zones=us-east-1a,us-east-1b --master-size=t2.medium --master-count=1 --master-volume-size=30 
                 --node-size=t2.medium --node-count=3 --node-volume-size=30 .

     - COMMAND : kops get cluster - To check the list of clusters .

- After KOPS cluster set-up is completed . Now am creating two files for depoying my application .

- one is deployment YAML file and the name is deployment.yaml .

- second is service YAML file and the name is svc.yaml .

- This is the screenshot of deployment YAML file .

- This is the screenshot of service YAML file .

-  Some Commands are there to Apply & Access .

       - COMMAND : kubectl apply -f deployment .yaml - To Executed the deployment file .

       - COMMAND : kubectl apply -f svc.yaml - To Executed the service file .

- There are some commands executed in my project .

       - COMMAND : kubectl get po - To Check the list of pods .

       - COMMAND : kubectl get deploy - To Check the list of Deployments .

       - COMMAND : kubectl get svc - To check the list of services .

NOTE : Here am taking the screenshots of list of pods , deployments , services pasted in GitHub Repository .

#STEP-8 : overall my Zomato Application deploying is completed .

- Now am accessing the Zomato application with public_ip:31482 . 

- This is the Screenshot of deployed Zomato Application .

7. CONCLUSION 

This project successfully implements a CI/CD pipeline for a Node.js Zomato Application. By using Docker and Kubernetes to set-up Kops Cluster it replicates 
real-world deployment workflows. This method provides a foundational understanding of DevOps practices and prepares the application for production-grade
infrastructure in the future.












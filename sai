                                                            PROJECT DOCUMENTATION

1. TITLE

CI/CD Pipeline for Zomato Application using Node.js, Docker, Kubernetes(kops cluster), and GitHub Actions .

2. INTRODUCTION

Modern application development demands automated pipelines to ensure continuous integration and delivery. This project demonstrates how to containerize a 
Node.js Zomato application and automate its build-test-deploy lifecycle using GitHub Actions for CI/CD, Docker for containerize the application and 
Deployment is handled by using kubernetes on kops cluster .

3. ABSTRACT

This project demonstrates the implementation of a CI/CD pipeline for the Zomato application using Docker containers, GitHub Actions, and Kubernetes(Kops) Pods.
The pipeline automatically builds Docker images, to build the code, runs unit tests, pushes images to Docker Hub, and deploys them using kubernetes(Kops). In
this project a zomato application am deploying in two ways and the first way is docker-compose am creating docker containers to run the application and the 
second one is kubernetes (kops cluster) am creating Pods to run the application. The pipeline is ensures consistent, automated and making it suitable for local
environments and learning devops practices.

4. TOOLS AND TECHNOLOGIES USED 

Git, GitHub, Node.js Jenkins, GitHub Actins for CI/CD Automation, Docker, Docker-Compose, DockerHub, Kubernetes(Kops Cluster), Kubectl .

5. STEPS INVOLVED IN BUILDING THE PROJECT

#STEP-1 : First of all taking a New Server with Server configurations are server_name : project, AMI : Amazon linux kernel 5.10, Instance_type : t2.medium,
           Key_Pair : sai-kp, Security_Group : All-Traffic, EBS : 20GIB . After connecting to Server with SSH .

#STEP-2 : Now changing to the Root User by using command 

          COMMAND : sudo -i - To change the Root User .

 Now To Set-Up the Tools Git, Docker, Docker-Compose, Jenkins, Kubernetes(Kops) by using Commands .

 - COMMAND : yum install git -y - To install the git .

 Jenkins Installation Commands :

 - COMMAND : yum install java-17-amazon-corretto -y - To install the java-17 version because of jenkins dependency java .

 - After collecting Two repos from jenkins.io .

 - COMMAND : yum install jenkins -y - To install the jenkins .

 - COMMAND : systemctl start jenkins - To start the jenkins service .

 - COMMAND : systemctl status jenkins - To check the status of the jenkins .

 Docker Installation Commands :

 - COMMAND : yum install docker -y - To install the docker .

 - COMMAND : systemctl start docker - To start the docker .

 - COMMAND : systemctl status docker - To check the status of the docker .

 - COMMAND : chmod 777 ///var/run/docker.sock - To communicate between docker to jenkins .

 Docker-Compose :

 - To set-up the docker-compose by collecting commands from the browser .

#STEP-3 :

- Now to Access the Jenkins dashboard with public-ip:8080. 8080 is a Jenkins Port Number. After creating a New Job in Jenkins and the Job_Name is Deployment.

- And my project is node.js Zomato Application package.json files .

- After To install the Plugins from manage jenkins ðŸ¡¢ plugins ðŸ¡¢ installed plugins .

- Plugins_Names : pipeline stage view , node.js, docker pipeline, eclipse temurin installer

- After configured all the plugins to jenkins Job .

- Now writing and implementing CI/CD pipeline with the stages .

    stage-1 : It is a clean workspace .
    stage-2 : To get the code from github to ci server .
    stage-3 : To build the Code 
    stage-4 : To build the dockerfile .then a New docker-image has to come .
    stage-5 : To Rename the docker-image and that docker-image push to Docker-Hub .
    stage-6 : To deploy the application in containers .

 - This is the screenshot of Jenkins Dashboard successfully executed pipeline .

 - This is the screenshot of docker images .

 - This is the screenshot of docker containers .

 - There are some Docker Commands are executed in this project and the commands are :

    - COMMAND : docker build -t image_name . - To build the dockerfile .

    - COMMAND : docker-compose up -d - To create a containers .

    - COMMAND : docker images - To check the list of images .

    - COMMAND : docker ps - To check the list of containers .

    - COMMAND : docker tag old_image_name new_image_name - To rename the docker-image .

    - COMMAND : docker push image_name - To push the image to dockerhub .

- This is the Dockerfile .

- This is the GitHub Actions CI/CD Workflow .

- This is the docker-compose.yaml .

- This is the screenshot of deployed Zomato Application .

#STEP-4 : Now to set-up a Kubernetes Kops Cluster in server by using 

  - awscli commands .   

  - kubectl commands .

  - kops cluster commands .

- To create a kops cluster creation by using command .

     - COMMAND : kops create cluster --name=sai.k8s.local --zones=us-east-1a,us-east-1b --master-size=t2.medium --master-count=1 --master-volume-size=30 
                 --node-size=t2.medium --node-count=3 --node-volume-size=30 .

     - COMMAND : kops get cluster - To check the list of clusters .

- Now To create a deployment YAML file and the name is deployment.yaml .

- After to create a service YAML file and the name is svc.yaml .

-  Some Commands are there to Apply & Access .

       - COMMAND : kubectl apply -f deployment .yaml - To Executed the deployment file .

       - COMMAND : kubectl apply -f svc.yaml - To Executed the service file .

 - Some Commands are there in Kubernetes .

      - COMMAND : kubectl get po - To Check the list of pods .

      - COMMAND : kubectl get deploy - To Check the list of Deployments .

      - COMMAND : kubectl get svc - To check the list of services .

      - COMMAND : kubectl describe pod pod_name - To Check the full information of the pod .

      - COMMAND : kubectl exec -it pod_name -- bash - To Go the inside the Pod .

      - COMMAND : kubectl logs pod_name - To Check the pod logs .

- This is the screenshot of list of pods .

- This is the screenshot of list of deployments .

- This is the screenshot of list of services .

- Now to access the Zomato application with public_ip:31482 . 

- This is the Screenshot of deployed Zomato Application .

7. CONCLUSION 

This project successfully implements a CI/CD pipeline for a Node.js Zomato Application. By using Docker and Kubernetes to set-up Kops Cluster it replicates 
real-world deployment workflows. This method provides a foundational understanding of DevOps practices and prepares the application for production-grade
infrastructure in the future.











    




 











